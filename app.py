# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15UOTMEko7Pi9Eej7D17c96Y-2etyCf3K
"""

# app.py
import streamlit as st
import pickle
import numpy as np
import pandas as pd
import shap
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

# ---------- Helpers ----------
def load_model_safe(path):
    try:
        with open(path, "rb") as f:
            return pickle.load(f)
    except Exception as e:
        st.error(f"Failed to load model `{path}`: {e}")
        return None

def explain_prediction_shap(model, background, X):
    try:
        explainer = shap.Explainer(model, background, silent=True)
        shap_values = explainer(X)
        return shap_values, explainer
    except Exception as e:
        return None, e

def contribution_text_from_shap(shap_values, feature_names, top_n=1):
    vals = shap_values.values[0]
    abs_vals = np.abs(vals)
    if abs_vals.sum() == 0:
        return "No feature contributions available."
    pct = 100 * abs_vals / abs_vals.sum()
    df = pd.DataFrame({
        "feature": feature_names,
        "shap_value": vals,
        "importance_pct": pct
    }).sort_values("importance_pct", ascending=False).head(top_n)
    r = df.iloc[0]
    sign = "increases" if r["shap_value"] > 0 else "decreases"
    return f"**Top Feature:** {r['feature']} ({r['importance_pct']:.1f}% | {sign} risk)"

def explain_with_fallback(model, X_df, feature_names):
    background = X_df.sample(1) if len(X_df) > 0 else X_df
    shap_res, info = explain_prediction_shap(model, background, X_df)
    if shap_res is not None:
        return contribution_text_from_shap(shap_res, feature_names, top_n=1)
    else:
        return f"SHAP failed: {info}"

# ---------- Load models ----------
st.set_page_config(page_title="Smart Health Assistant", page_icon="ü©∫", layout="centered")
st.title("Smart Health Assistant")

diabetes_model = load_model_safe("diabetes_model.sav")
heart_model = load_model_safe("heart_disease_model.sav")
parkinsons_model = load_model_safe("parkinsons_model.sav")

choice = st.sidebar.selectbox("Choose prediction", ["Home", "Diabetes", "Heart Disease", "Parkinson's"])

# ---------------- Diabetes ----------------
if choice == "Diabetes":
    st.header("Diabetes Prediction")

    c1, c2 = st.columns(2)
    with c1:
        Pregnancies = st.number_input("Pregnancies", 0, 20, 0)
        Glucose = st.number_input("Glucose", 0, 300, 120)
        BloodPressure = st.number_input("Blood Pressure", 0, 200, 70)
        SkinThickness = st.number_input("Skin Thickness", 0, 100, 20)
    with c2:
        Insulin = st.number_input("Insulin", 0, 900, 80)
        BMI = st.number_input("BMI", 0.0, 70.0, 25.0)
        DPF = st.number_input("Diabetes Pedigree Function", 0.0, 3.0, 0.5)
        Age = st.number_input("Age", 0, 120, 35)

    feature_names = ['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']
    X = pd.DataFrame([[Pregnancies,Glucose,BloodPressure,SkinThickness,Insulin,BMI,DPF,Age]], columns=feature_names)

    if st.button("Predict Diabetes"):
        if diabetes_model:
            pred = diabetes_model.predict(X)[0]
            prob = diabetes_model.predict_proba(X)[0,1] if hasattr(diabetes_model,"predict_proba") else None
            st.write("‚úÖ Not diabetic" if pred==0 else "‚ö†Ô∏è Diabetic")
            if prob is not None:
                st.write(f"Probability: {prob*100:.1f}%")
            st.info(explain_with_fallback(diabetes_model, X, feature_names))

# ---------------- Heart Disease ----------------
if choice == "Heart Disease":
    st.header("Heart Disease Prediction")

    c1, c2 = st.columns(2)
    with c1:
        Age = st.number_input("Age", 0, 120, 50)
        Sex = st.selectbox("Sex (0=female,1=male)", [0,1])
        ChestPainType = st.number_input("Chest Pain Type (0-3)", 0, 3, 0)
        RestingBloodPressure = st.number_input("Resting BP", 0, 250, 120)
        SerumCholesterol = st.number_input("Cholesterol", 0, 600, 230)
        FBS = st.selectbox("FBS > 120", [0,1])
    with c2:
        RestECG = st.number_input("Resting ECG (0-2)", 0, 2, 1)
        MaxHR = st.number_input("Max HR", 0, 250, 150)
        ExAngina = st.selectbox("Exercise Angina", [0,1])
        STDep = st.number_input("ST Depression", 0.0, 10.0, 1.0)
        STSlope = st.number_input("ST Segment Slope (0-2)", 0, 2, 1)
        NumVessels = st.number_input("Major Vessels (0-3)", 0, 3, 0)
        Thal = st.number_input("Thalassemia (0-3)", 0, 3, 3)

    feat_names_heart = ['Age','Sex','ChestPainType','RestingBloodPressure','SerumCholesterol',
                        'FastingBloodSugarOver120','RestingECG','MaxHeartRateAchieved',
                        'ExerciseInducedAngina','STDepression','STSegmentSlope','NumMajorVesselsColored','ThalassemiaType']

    Xh = pd.DataFrame([[Age,Sex,ChestPainType,RestingBloodPressure,SerumCholesterol,
                        FBS,RestECG,MaxHR,ExAngina,STDep,STSlope,NumVessels,Thal]],
                      columns=feat_names_heart)

    if st.button("Predict Heart Disease"):
        if heart_model:
            pred = heart_model.predict(Xh)[0]
            prob = heart_model.predict_proba(Xh)[0,1] if hasattr(heart_model,"predict_proba") else None
            st.write("‚úÖ No heart disease" if pred==0 else "‚ö†Ô∏è Heart disease")
            if prob is not None:
                st.write(f"Probability: {prob*100:.1f}%")
            st.info(explain_with_fallback(heart_model, Xh, feat_names_heart))

# ---------------- Parkinson's ----------------
if choice == "Parkinson's":
    st.header("Parkinson's Prediction")

    c1, c2, c3 = st.columns(3)
    with c1:
        Fo = st.number_input("MDVP:Fo(Hz)", value=120.0)
        Fhi = st.number_input("MDVP:Fhi(Hz)", value=150.0)
        Flo = st.number_input("MDVP:Flo(Hz)", value=110.0)
    with c2:
        Jitter = st.number_input("MDVP:Jitter(%)", value=0.01)
        JitterAbs = st.number_input("MDVP:Jitter(Abs)", value=0.00008)
        RAP = st.number_input("MDVP:RAP", value=0.004)
        PPQ = st.number_input("MDVP:PPQ", value=0.006)
    with c3:
        Shimmer = st.number_input("MDVP:Shimmer", value=0.05)
        HNR = st.number_input("HNR", value=20.0)
        PPE = st.number_input("PPE", value=0.28)

    feat_names_par = ['MDVP:Fo(Hz)','MDVP:Fhi(Hz)','MDVP:Flo(Hz)','MDVP:Jitter(%)','MDVP:Jitter(Abs)','MDVP:RAP','MDVP:PPQ','MDVP:Shimmer','HNR','PPE']

    Xp = pd.DataFrame([[Fo,Fhi,Flo,Jitter,JitterAbs,RAP,PPQ,Shimmer,HNR,PPE]], columns=feat_names_par)

    if st.button("Predict Parkinson's"):
        if parkinsons_model:
            pred = parkinsons_model.predict(Xp)[0]
            prob = parkinsons_model.predict_proba(Xp)[0,1] if hasattr(parkinsons_model,"predict_proba") else None
            st.write("‚úÖ No Parkinson's" if pred==0 else "‚ö†Ô∏è Parkinson's")
            if prob is not None:
                st.write(f"Probability: {prob*100:.1f}%")
            st.info(explain_with_fallback(parkinsons_model, Xp, feat_names_par))

