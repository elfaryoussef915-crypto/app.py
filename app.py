# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15UOTMEko7Pi9Eej7D17c96Y-2etyCf3K
"""

import streamlit as st
import pickle
import numpy as np
import shap
import matplotlib.pyplot as plt

# ----------------- Load Models -----------------
diabetes_model = pickle.load(open("diabetes_model.sav", "rb"))
heart_model = pickle.load(open("heart_disease_model.sav", "rb"))
parkinsons_model = pickle.load(open("parkinsons_model.sav", "rb"))

st.set_page_config(page_title="Multiple Disease Prediction App", layout="wide")

st.title("ü©∫ Multiple Disease Prediction System")
st.write("This app predicts **Diabetes**, **Heart Disease**, and **Parkinson‚Äôs Disease** using Machine Learning.")

# Sidebar for navigation
with st.sidebar:
    st.header("Choose Disease Model")
    selected = st.radio("Select a model:", ("Diabetes", "Heart Disease", "Parkinson‚Äôs Disease"))

# ----------------- Diabetes Prediction -----------------
if selected == "Diabetes":
    st.subheader("üî¨ Diabetes Prediction")
    
    Pregnancies = st.number_input("Pregnancies", min_value=0, value=0)
    Glucose = st.number_input("Glucose", min_value=0, value=0)
    BloodPressure = st.number_input("Blood Pressure", min_value=0, value=0)
    SkinThickness = st.number_input("Skin Thickness", min_value=0, value=0)
    Insulin = st.number_input("Insulin", min_value=0, value=0)
    BMI = st.number_input("BMI", min_value=0.0, value=0.0)
    DiabetesPedigreeFunction = st.number_input("Diabetes Pedigree Function", min_value=0.0, value=0.0)
    Age = st.number_input("Age", min_value=0, value=0)
    
    if st.button("Predict Diabetes"):
        diab_prediction = diabetes_model.predict([[Pregnancies, Glucose, BloodPressure, SkinThickness,
                                                   Insulin, BMI, DiabetesPedigreeFunction, Age]])
        st.success("‚úÖ Person is Diabetic" if diab_prediction[0] == 1 else "‚ùå Person is Not Diabetic")

    # SHAP feature importance
    st.subheader("üìä Most Important Features (Diabetes)")
    explainer = shap.TreeExplainer(diabetes_model)
    shap_values = explainer.shap_values(np.zeros((1,8)))
    fig, ax = plt.subplots()
    shap.summary_plot(shap_values, features=np.zeros((1,8)), feature_names=[
        "Pregnancies","Glucose","BloodPressure","SkinThickness","Insulin","BMI","DiabetesPedigreeFunction","Age"
    ], show=False)
    st.pyplot(fig)

# ----------------- Heart Disease Prediction -----------------
elif selected == "Heart Disease":
    st.subheader("‚ù§Ô∏è Heart Disease Prediction")
    
    Age = st.number_input("Age", min_value=0, value=0)
    Sex = st.number_input("Sex (1=Male, 0=Female)", min_value=0, max_value=1, value=0)
    ChestPainType = st.number_input("Chest Pain Type (0-3)", min_value=0, max_value=3, value=0)
    RestingBloodPressure = st.number_input("Resting Blood Pressure", min_value=0, value=0)
    SerumCholesterol = st.number_input("Serum Cholesterol", min_value=0, value=0)
    FastingBloodSugarOver120 = st.number_input("Fasting Blood Sugar >120 (1=Yes,0=No)", min_value=0, max_value=1, value=0)
    RestingECG = st.number_input("Resting ECG (0-2)", min_value=0, max_value=2, value=0)
    MaxHeartRateAchieved = st.number_input("Max Heart Rate", min_value=0, value=0)
    ExerciseInducedAngina = st.number_input("Exercise Induced Angina (1=Yes,0=No)", min_value=0, max_value=1, value=0)
    STDepression = st.number_input("ST Depression", min_value=0.0, value=0.0)
    STSegmentSlope = st.number_input("ST Segment Slope (0-2)", min_value=0, max_value=2, value=0)
    NumMajorVesselsColored = st.number_input("Num Major Vessels Colored (0-3)", min_value=0, max_value=3, value=0)
    ThalassemiaType = st.number_input("Thalassemia Type (1-3)", min_value=1, max_value=3, value=1)

    if st.button("Predict Heart Disease"):
        heart_prediction = heart_model.predict([[Age, Sex, ChestPainType, RestingBloodPressure,
                                                 SerumCholesterol, FastingBloodSugarOver120, RestingECG,
                                                 MaxHeartRateAchieved, ExerciseInducedAngina, STDepression,
                                                 STSegmentSlope, NumMajorVesselsColored, ThalassemiaType]])
        st.success("‚úÖ Person has Heart Disease" if heart_prediction[0] == 1 else "‚ùå Person does Not have Heart Disease")

    # SHAP feature importance
    st.subheader("üìä Most Important Features (Heart Disease)")
    explainer = shap.TreeExplainer(heart_model)
    shap_values = explainer.shap_values(np.zeros((1,13)))
    fig, ax = plt.subplots()
    shap.summary_plot(shap_values, features=np.zeros((1,13)), feature_names=[
        "Age","Sex","ChestPainType","RestingBloodPressure","SerumCholesterol",
        "FastingBloodSugarOver120","RestingECG","MaxHeartRateAchieved",
        "ExerciseInducedAngina","STDepression","STSegmentSlope",
        "NumMajorVesselsColored","ThalassemiaType"
    ], show=False)
    st.pyplot(fig)

# ----------------- Parkinson‚Äôs Prediction -----------------
elif selected == "Parkinson‚Äôs Disease":
    st.subheader("üß† Parkinson‚Äôs Disease Prediction")

    MDVP_Fo = st.number_input("MDVP:Fo(Hz)", min_value=0.0, value=0.0)
    MDVP_Fhi = st.number_input("MDVP:Fhi(Hz)", min_value=0.0, value=0.0)
    MDVP_Flo = st.number_input("MDVP:Flo(Hz)", min_value=0.0, value=0.0)
    MDVP_Jitter = st.number_input("MDVP:Jitter(%)", min_value=0.0, value=0.0)
    MDVP_Shimmer = st.number_input("MDVP:Shimmer", min_value=0.0, value=0.0)
    HNR = st.number_input("HNR", min_value=0.0, value=0.0)
    RPDE = st.number_input("RPDE", min_value=0.0, value=0.0)
    DFA = st.number_input("DFA", min_value=0.0, value=0.0)
    spread1 = st.number_input("Spread1", min_value=0.0, value=0.0)
    spread2 = st.number_input("Spread2", min_value=0.0, value=0.0)
    D2 = st.number_input("D2", min_value=0.0, value=0.0)
    PPE = st.number_input("PPE", min_value=0.0, value=0.0)

    if st.button("Predict Parkinson‚Äôs"):
        parkinsons_prediction = parkinsons_model.predict([[MDVP_Fo, MDVP_Fhi, MDVP_Flo, MDVP_Jitter,
                                                           MDVP_Shimmer, HNR, RPDE, DFA, spread1, spread2, D2, PPE]])
        st.success("‚úÖ Person has Parkinson‚Äôs Disease" if parkinsons_prediction[0] == 1 else "‚ùå Person does Not have Parkinson‚Äôs Disease")

    # SHAP feature importance
    st.subheader("üìä Most Important Features (Parkinson‚Äôs)")
    explainer = shap.TreeExplainer(parkinsons_model)
    shap_values = explainer.shap_values(np.zeros((1,12)))
    fig, ax = plt.subplots()
    shap.summary_plot(shap_values, features=np.zeros((1,12)), feature_names=[
        "MDVP_Fo","MDVP_Fhi","MDVP_Flo","MDVP_Jitter","MDVP_Shimmer",
        "HNR","RPDE","DFA","Spread1","Spread2","D2","PPE"
    ], show=False)
    st.pyplot(fig)
