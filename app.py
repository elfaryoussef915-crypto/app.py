# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15UOTMEko7Pi9Eej7D17c96Y-2etyCf3K
"""

import streamlit as st
import pickle
import shap
import matplotlib.pyplot as plt
import pandas as pd

# ---------------- Load Models ----------------
diabetes_model = pickle.load(open("diabetes_model.sav", "rb"))
heart_model = pickle.load(open("heart_disease_model.sav", "rb"))
parkinsons_model = pickle.load(open("parkinsons_model.sav", "rb"))

# ---------------- Helper Functions ----------------
def explain_model(model, X_sample):
    explainer = shap.Explainer(model, X_sample)
    shap_values = explainer(X_sample)
    st.subheader("Feature Importance")
    fig, ax = plt.subplots()
    shap.summary_plot(shap_values, X_sample, plot_type="bar", show=False)
    st.pyplot(fig)

# ---------------- Streamlit UI ----------------
st.title("üßë‚Äç‚öïÔ∏è Multiple Disease Prediction System")
st.markdown("### Choose a model and input patient data")

option = st.selectbox(
    "Select a Prediction Model",
    ("Diabetes Prediction", "Heart Disease Prediction", "Parkinson's Prediction")
)

# ---------------- Diabetes ----------------
if option == "Diabetes Prediction":
    st.subheader("Patient Data for Diabetes")
    Pregnancies = st.number_input("Pregnancies", min_value=0, value=0)
    Glucose = st.number_input("Glucose", min_value=0, value=0)
    BloodPressure = st.number_input("Blood Pressure", min_value=0, value=0)
    SkinThickness = st.number_input("Skin Thickness", min_value=0, value=0)
    Insulin = st.number_input("Insulin", min_value=0, value=0)
    BMI = st.number_input("BMI", min_value=0.0, value=0.0)
    DiabetesPedigreeFunction = st.number_input("Diabetes Pedigree Function", min_value=0.0, value=0.0)
    Age = st.number_input("Age", min_value=0, value=0)

    features = pd.DataFrame([[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age]],
                            columns=['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age'])

    if st.button("Predict Diabetes"):
        pred = diabetes_model.predict(features)
        st.success("‚úÖ Diabetic" if pred[0] == 1 else "‚ùå Not Diabetic")
        explain_model(diabetes_model, features)

# ---------------- Heart ----------------
elif option == "Heart Disease Prediction":
    st.subheader("Patient Data for Heart Disease")
    Age = st.number_input("Age", min_value=0, value=0)
    Sex = st.selectbox("Sex (1=Male, 0=Female)", [0,1])
    ChestPainType = st.number_input("Chest Pain Type", min_value=0, value=0)
    RestingBloodPressure = st.number_input("Resting Blood Pressure", min_value=0, value=0)
    SerumCholesterol = st.number_input("Serum Cholesterol", min_value=0, value=0)
    FastingBloodSugarOver120 = st.selectbox("Fasting Blood Sugar > 120 (1=Yes, 0=No)", [0,1])
    RestingECG = st.number_input("Resting ECG", min_value=0, value=0)
    MaxHeartRateAchieved = st.number_input("Max Heart Rate Achieved", min_value=0, value=0)
    ExerciseInducedAngina = st.selectbox("Exercise Induced Angina (1=Yes, 0=No)", [0,1])
    STDepression = st.number_input("ST Depression", min_value=0.0, value=0.0)
    STSegmentSlope = st.number_input("ST Segment Slope", min_value=0, value=0)
    NumMajorVesselsColored = st.number_input("Num Major Vessels Colored", min_value=0, value=0)
    ThalassemiaType = st.number_input("Thalassemia Type", min_value=0, value=0)

    features = pd.DataFrame([[Age, Sex, ChestPainType, RestingBloodPressure, SerumCholesterol,
                              FastingBloodSugarOver120, RestingECG, MaxHeartRateAchieved,
                              ExerciseInducedAngina, STDepression, STSegmentSlope,
                              NumMajorVesselsColored, ThalassemiaType]],
                            columns=['Age','Sex','ChestPainType','RestingBloodPressure','SerumCholesterol',
                                     'FastingBloodSugarOver120','RestingECG','MaxHeartRateAchieved',
                                     'ExerciseInducedAngina','STDepression','STSegmentSlope',
                                     'NumMajorVesselsColored','ThalassemiaType'])

    if st.button("Predict Heart Disease"):
        pred = heart_model.predict(features)
        st.success("‚ù§Ô∏è Heart Disease Detected" if pred[0] == 1 else "‚úÖ No Heart Disease")
        explain_model(heart_model, features)

# ---------------- Parkinson's ----------------
elif option == "Parkinson's Prediction":
    st.subheader("Patient Data for Parkinson's Disease")
    fo = st.number_input("MDVP:Fo(Hz)", min_value=0.0, value=0.0)
    fhi = st.number_input("MDVP:Fhi(Hz)", min_value=0.0, value=0.0)
    flo = st.number_input("MDVP:Flo(Hz)", min_value=0.0, value=0.0)
    jitter = st.number_input("MDVP:Jitter(%)", min_value=0.0, value=0.0)
    shimmer = st.number_input("MDVP:Shimmer", min_value=0.0, value=0.0)
    NHR = st.number_input("NHR", min_value=0.0, value=0.0)
    HNR = st.number_input("HNR", min_value=0.0, value=0.0)

    features = pd.DataFrame([[fo, fhi, flo, jitter, shimmer, NHR, HNR]],
                            columns=['MDVP:Fo(Hz)','MDVP:Fhi(Hz)','MDVP:Flo(Hz)',
                                     'MDVP:Jitter(%)','MDVP:Shimmer','NHR','HNR'])

    if st.button("Predict Parkinson's"):
        pred = parkinsons_model.predict(features)
        st.success("üß† Parkinson's Detected" if pred[0] == 1 else "‚úÖ No Parkinson's")
        explain_model(parkinsons_model, features)
